// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using System.Text;

namespace Urho3DMaterialEditor.Model.Templates
{
    /// <summary>
    ///     Class to produce the template output
    /// </summary>
#line 1 "E:\MyWork\Toe.Scripting\src\Urho3DMaterialEditor\Model\Templates\HLSLTemplate.tt"
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class HLSLTemplate : HLSLTemplateBase
    {
        /// <summary>
        ///     Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            Write("#include \"Uniforms.hlsl\"\r\n#include \"Samplers.hlsl\"\r\n#include \"Transform.hlsl\"\r\n\r\n" +
                  "void VS(float4 iPos : POSITION,\r\n    #ifdef DIFFMAP\r\n        float2 iTexCoord : " +
                  "TEXCOORD0,\r\n    #endif\r\n    #ifdef VERTEXCOLOR\r\n        float4 iColor : COLOR0,\r" +
                  "\n    #endif\r\n    #ifdef SKINNED\r\n        float4 iBlendWeights : BLENDWEIGHT,\r\n  " +
                  "      int4 iBlendIndices : BLENDINDICES,\r\n    #endif\r\n    #ifdef INSTANCED\r\n    " +
                  "    float4x3 iModelInstance : TEXCOORD4,\r\n    #endif\r\n    #if defined(BILLBOARD)" +
                  " || defined(DIRBILLBOARD)\r\n        float2 iSize : TEXCOORD1,\r\n    #endif\r\n    #i" +
                  "f defined(DIRBILLBOARD) || defined(TRAILBONE)\r\n        float3 iNormal : NORMAL,\r" +
                  "\n    #endif\r\n    #if defined(TRAILFACECAM) || defined(TRAILBONE)\r\n        float4" +
                  " iTangent : TANGENT,\r\n    #endif\r\n    #ifdef DIFFMAP\r\n        out float2 oTexCoo" +
                  "rd : TEXCOORD0,\r\n    #endif\r\n    #ifdef VERTEXCOLOR\r\n        out float4 oColor :" +
                  " COLOR0,\r\n    #endif\r\n    #if defined(D3D11) && defined(CLIPPLANE)\r\n        out " +
                  "float oClip : SV_CLIPDISTANCE0,\r\n    #endif\r\n    out float4 oPos : OUTPOSITION)\r" +
                  "\n{\r\n    float4x3 modelMatrix = iModelMatrix;\r\n    float3 worldPos = GetWorldPos(" +
                  "modelMatrix);\r\n    oPos = GetClipPos(worldPos);\r\n\r\n    #if defined(D3D11) && def" +
                  "ined(CLIPPLANE)\r\n        oClip = dot(oPos, cClipPlane);\r\n    #endif\r\n\r\n    #ifde" +
                  "f VERTEXCOLOR\r\n        oColor = iColor;\r\n    #endif\r\n    #ifdef DIFFMAP\r\n       " +
                  " oTexCoord = iTexCoord;\r\n    #endif\r\n}\r\n\r\nvoid PS(\r\n    #if defined(DIFFMAP) || " +
                  "defined(ALPHAMAP)\r\n        float2 iTexCoord : TEXCOORD0,\r\n    #endif\r\n    #ifdef" +
                  " VERTEXCOLOR\r\n        float4 iColor : COLOR0,\r\n    #endif\r\n    #if defined(D3D11" +
                  ") && defined(CLIPPLANE)\r\n        float iClip : SV_CLIPDISTANCE0,\r\n    #endif\r\n  " +
                  "  out float4 oColor : OUTCOLOR0)\r\n{\r\n    float4 diffColor = cMatDiffColor;\r\n\r\n  " +
                  "  #ifdef VERTEXCOLOR\r\n        diffColor *= iColor;\r\n    #endif\r\n\r\n    #if (!defi" +
                  "ned(DIFFMAP)) && (!defined(ALPHAMAP))\r\n        oColor = diffColor;\r\n    #endif\r\n" +
                  "    #ifdef DIFFMAP\r\n        float4 diffInput = Sample2D(DiffMap, iTexCoord);\r\n  " +
                  "      #ifdef ALPHAMASK\r\n            if (diffInput.a < 0.5)\r\n                disc" +
                  "ard;\r\n        #endif\r\n        oColor = diffColor * diffInput;\r\n    #endif\r\n    #" +
                  "ifdef ALPHAMAP\r\n        float alphaInput = Sample2D(DiffMap, iTexCoord).a;\r\n    " +
                  "    oColor = float4(diffColor.rgb, diffColor.a * alphaInput);\r\n    #endif\r\n}\r\n");
            return GenerationEnvironment.ToString();
        }
    }

#line default
#line hidden

    #region Base class

    /// <summary>
    ///     Base class for this transformation
    /// </summary>
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class HLSLTemplateBase
    {
        #region Fields

        private StringBuilder generationEnvironmentField;
        private CompilerErrorCollection errorsField;
        private List<int> indentLengthsField;
        private bool endsWithNewline;

        #endregion

        #region Properties

        /// <summary>
        ///     The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected StringBuilder GenerationEnvironment
        {
            get
            {
                if (generationEnvironmentField == null) generationEnvironmentField = new StringBuilder();
                return generationEnvironmentField;
            }
            set => generationEnvironmentField = value;
        }

        /// <summary>
        ///     The error collection for the generation process
        /// </summary>
        public CompilerErrorCollection Errors
        {
            get
            {
                if (errorsField == null) errorsField = new CompilerErrorCollection();
                return errorsField;
            }
        }

        /// <summary>
        ///     A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private List<int> indentLengths
        {
            get
            {
                if (indentLengthsField == null) indentLengthsField = new List<int>();
                return indentLengthsField;
            }
        }

        /// <summary>
        ///     Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent { get; private set; } = "";

        /// <summary>
        ///     Current transformation session
        /// </summary>
        public virtual IDictionary<string, object> Session { get; set; }

        #endregion

        #region Transform-time helpers

        /// <summary>
        ///     Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend)) return;
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (GenerationEnvironment.Length == 0
                || endsWithNewline)
            {
                GenerationEnvironment.Append(CurrentIndent);
                endsWithNewline = false;
            }

            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(Environment.NewLine, StringComparison.CurrentCulture)) endsWithNewline = true;
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if (CurrentIndent.Length == 0)
            {
                GenerationEnvironment.Append(textToAppend);
                return;
            }

            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(Environment.NewLine, Environment.NewLine + CurrentIndent);
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (endsWithNewline)
                GenerationEnvironment.Append(textToAppend, 0, textToAppend.Length - CurrentIndent.Length);
            else
                GenerationEnvironment.Append(textToAppend);
        }

        /// <summary>
        ///     Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            Write(textToAppend);
            GenerationEnvironment.AppendLine();
            endsWithNewline = true;
        }

        /// <summary>
        ///     Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            Write(string.Format(CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        ///     Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            WriteLine(string.Format(CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        ///     Raise an error
        /// </summary>
        public void Error(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            Errors.Add(error);
        }

        /// <summary>
        ///     Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            Errors.Add(error);
        }

        /// <summary>
        ///     Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if (indent == null) throw new ArgumentNullException("indent");
            CurrentIndent = CurrentIndent + indent;
            indentLengths.Add(indent.Length);
        }

        /// <summary>
        ///     Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            var returnValue = "";
            if (indentLengths.Count > 0)
            {
                var indentLength = indentLengths[indentLengths.Count - 1];
                indentLengths.RemoveAt(indentLengths.Count - 1);
                if (indentLength > 0)
                {
                    returnValue = CurrentIndent.Substring(CurrentIndent.Length - indentLength);
                    CurrentIndent = CurrentIndent.Remove(CurrentIndent.Length - indentLength);
                }
            }

            return returnValue;
        }

        /// <summary>
        ///     Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            indentLengths.Clear();
            CurrentIndent = "";
        }

        #endregion

        #region ToString Helpers

        /// <summary>
        ///     Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private IFormatProvider formatProviderField = CultureInfo.InvariantCulture;

            /// <summary>
            ///     Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public IFormatProvider FormatProvider
            {
                get => formatProviderField;
                set
                {
                    if (value != null) formatProviderField = value;
                }
            }

            /// <summary>
            ///     This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if (objectToConvert == null) throw new ArgumentNullException("objectToConvert");
                var t = objectToConvert.GetType();
                var method = t.GetMethod("ToString", new[]
                {
                    typeof(IFormatProvider)
                });
                if (method == null)
                    return objectToConvert.ToString();
                return (string) method.Invoke(objectToConvert, new object[]
                {
                    formatProviderField
                });
            }
        }

        /// <summary>
        ///     Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper { get; } = new ToStringInstanceHelper();

        #endregion
    }

    #endregion
}